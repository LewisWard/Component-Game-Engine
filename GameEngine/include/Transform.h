/*
Copyright (c) 2016-2017 Lewis Ward: http://www.lewis-ward.com/

This software is provided 'as-is', without any express or implied warranty.
In no event will the author be held liable for any damages arising from the use of this software.
Anyone can compile the software for personal use, no permission is granted for anyone to use the software for any other use including commercial applications,
subject to the following restrictions:

1. The origin of this software must not be misrepresented; you must not claim that you wrote the original software.
2. This notice may not be removed or altered from any source distribution.
*/
#pragma once
#include "Components.h"

namespace GE
{
	//----------------------------------------------------------------------------------------------------------------------
	/// \brief Stores the position, scale and rotation
	//----------------------------------------------------------------------------------------------------------------------
	class Transform : public Component
	{
	public:
		//----------------------------------------------------------------------------------------------------------------------
		/// \brief  Constructor
		//----------------------------------------------------------------------------------------------------------------------
		Transform();

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief  Copy Constructor
		//----------------------------------------------------------------------------------------------------------------------
		Transform(const Transform& t);

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief  Desstructor
		//----------------------------------------------------------------------------------------------------------------------
		~Transform();

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief  get current position
		/// \return	glm::vec3
		//----------------------------------------------------------------------------------------------------------------------
		inline glm::vec3 getPosition() { return m_position; }

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief  get current scale
		/// \return	glm::vec3
		//----------------------------------------------------------------------------------------------------------------------
		inline glm::vec3 getScale() { return m_scale; }

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief  get current rotation
		/// \return	glm::vec3
		//----------------------------------------------------------------------------------------------------------------------
		inline glm::vec3 getRotation() { return m_rotation; }

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief  set current position
		/// prama		glm::vec3
		//----------------------------------------------------------------------------------------------------------------------
		inline void setPosition(const glm::vec3& p) { m_position = p; }

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief  set current scale
		/// prama		glm::vec3
		//----------------------------------------------------------------------------------------------------------------------
		inline void setScale(const glm::vec3& s) { m_scale = s; }

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief  set current rotation
		/// prama		glm::vec3
		//----------------------------------------------------------------------------------------------------------------------
		inline void setRotation(const glm::vec3& r) { m_rotation = r; }

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief  translate
		/// prama		glm::vec3
		//----------------------------------------------------------------------------------------------------------------------
		inline void translate(const glm::vec3& p) { m_position += p; }

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief  creates a 4x4 matrix with current position, scale and rotation
		/// \return	glm::mat4 
		//----------------------------------------------------------------------------------------------------------------------
		glm::mat4 createTransform();

	private:
		glm::vec3 m_position;
		glm::vec3 m_scale;
		glm::vec3 m_rotation;
	};
};
