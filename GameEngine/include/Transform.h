// Author  : Lewis Ward (i7212443)
// Program : Game Engine
// Date    : 07/12/2016
#pragma once
#include "Components.h"

namespace GE
{
	//----------------------------------------------------------------------------------------------------------------------
	/// \brief Stores the position, scale and rotation
	//----------------------------------------------------------------------------------------------------------------------
	class Transform : public Component
	{
	public:
		//----------------------------------------------------------------------------------------------------------------------
		/// \brief  Constructor
		//----------------------------------------------------------------------------------------------------------------------
		Transform();

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief  Copy Constructor
		//----------------------------------------------------------------------------------------------------------------------
		Transform(const Transform& t);

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief  Desstructor
		//----------------------------------------------------------------------------------------------------------------------
		~Transform();

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief  get current position
		/// \return	glm::vec3
		//----------------------------------------------------------------------------------------------------------------------
		inline glm::vec3 getPosition() { return m_position; }

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief  get current scale
		/// \return	glm::vec3
		//----------------------------------------------------------------------------------------------------------------------
		inline glm::vec3 getScale() { return m_scale; }

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief  get current rotation
		/// \return	glm::vec3
		//----------------------------------------------------------------------------------------------------------------------
		inline glm::vec3 getRotation() { return m_rotation; }

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief  set current position
		/// prama		glm::vec3
		//----------------------------------------------------------------------------------------------------------------------
		inline void setPosition(glm::vec3& p) { m_position = p; }

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief  set current scale
		/// prama		glm::vec3
		//----------------------------------------------------------------------------------------------------------------------
		inline void setScale(glm::vec3& s) { m_scale = s; }

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief  set current rotation
		/// prama		glm::vec3
		//----------------------------------------------------------------------------------------------------------------------
		inline void setRotation(glm::vec3& r) { m_rotation = r; }

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief  translate
		/// prama		glm::vec3
		//----------------------------------------------------------------------------------------------------------------------
		inline void translate(glm::vec3& p) { m_position += p; }

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief  creates a 4x4 matrix with current position, scale and rotation
		/// \return	glm::mat4 
		//----------------------------------------------------------------------------------------------------------------------
		glm::mat4 createTransform();

	private:
		glm::vec3 m_position;
		glm::vec3 m_scale;
		glm::vec3 m_rotation;
	};
};
