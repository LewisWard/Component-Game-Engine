// Author  : Lewis Ward (i7212443)
// Program : Game Engine
// Date    : 07/12/2016
#pragma once
#include "Components.h"
#include "SphereCollider.h"

namespace GE
{
	//----------------------------------------------------------------------------------------------------------------------
	/// \brief Box (AABB) collision detection
	//----------------------------------------------------------------------------------------------------------------------
	class BoxCollider : public Component
	{
		friend class AABB;
	public:

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief  Constructor
		//----------------------------------------------------------------------------------------------------------------------
		BoxCollider();

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief  Constructor
		/// prama glm::vec3 center
		/// prama glm::vec3 radius
		//----------------------------------------------------------------------------------------------------------------------
		BoxCollider(glm::vec3 center, glm::vec3 size);

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief  Destructor
		//----------------------------------------------------------------------------------------------------------------------
		~BoxCollider();

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief  draw the AABB around the attached object - useful for testing
		//----------------------------------------------------------------------------------------------------------------------
		void onDraw();

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief  create the boundary based on the object
		/// prama shared<GEC::ObjObject>
		//----------------------------------------------------------------------------------------------------------------------
		void boundToObject(shared<GEC::ObjObject> obj);

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief  set min
		/// prama glm::vec3
		//----------------------------------------------------------------------------------------------------------------------
		void setMin(glm::vec3 min) { m_boundingBox.min = min; m_boundingBox.center = ((m_boundingBox.max - m_boundingBox.min) / 2.0f) + m_boundingBox.min; };

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief  set max
		/// prama glm::vec3
		//----------------------------------------------------------------------------------------------------------------------
		void setMax(glm::vec3 max) { m_boundingBox.max = max; m_boundingBox.center = ((m_boundingBox.max - m_boundingBox.min) / 2.0f) + m_boundingBox.min; };

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief  get min
		/// prama glm::vec3
		//----------------------------------------------------------------------------------------------------------------------
		inline glm::vec3 getMin() { return m_boundingBox.min; }

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief get max
		/// prama glm::vec3
		//----------------------------------------------------------------------------------------------------------------------
		inline glm::vec3 getMax() { return m_boundingBox.max; }

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief get center
		/// prama glm::vec3
		//----------------------------------------------------------------------------------------------------------------------
		inline glm::vec3 getCenter() { return m_boundingBox.center; }

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief  check if a collision has occurred between another GE::BoxCollider
		/// prama GE::BoxCollider
		//----------------------------------------------------------------------------------------------------------------------
		bool collision(BoxCollider other);

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief  check if a collision has occurred between a GE::SphereCollider
		/// prama GE::SphereCollider
		//----------------------------------------------------------------------------------------------------------------------
		bool collision(GE::SphereCollider sphere);

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief  set radius
		/// prama float
		//----------------------------------------------------------------------------------------------------------------------
		inline void setScreenRes(glm::vec2 screen) { m_screenRes = screen; }

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief  set radius
		/// prama float
		//----------------------------------------------------------------------------------------------------------------------
		void setMVPUniforms(glm::mat4 M, glm::mat4 V, glm::mat4 P);

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief  recompute bounds after AABB has been moved
		/// prama glm::vec3
		//----------------------------------------------------------------------------------------------------------------------
		void recomputeBounds(const glm::vec3& newPosition);

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief debug draw on or off
		/// prama bool
		//----------------------------------------------------------------------------------------------------------------------
		inline void toggleDraw(bool draw) { m_enableDraw = draw; }

	public:
		GEC::AABB m_boundingBox;
		glm::vec2 m_screenRes;

	private:
		//----------------------------------------------------------------------------------------------------------------------
		/// \brief  makes a vertex buffer for the AABB
		//----------------------------------------------------------------------------------------------------------------------
		void makeVertexBuffer();

		shared<GEC::VertexBuffer> m_vertexBuffer;
		shared<GE::Program> m_shaderProgram;
		int m_indexCount;
		bool m_enableDraw;
	};
};



