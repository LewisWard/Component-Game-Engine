// Author  : Lewis Ward (i7212443)
// Program : Game Engine
// Date    : 07/12/2016
/*
* This class is the same as in Assignment 1, it has not been created or modified
*/
#pragma once
#include "Components.h"

namespace GE
{
	//----------------------------------------------------------------------------------------------------------------------
	/// \brief Sphere collision detection
	//----------------------------------------------------------------------------------------------------------------------
	class SphereCollider : public Component
	{
	public:
		//----------------------------------------------------------------------------------------------------------------------
		/// \brief  Constructor
		//----------------------------------------------------------------------------------------------------------------------
		SphereCollider();

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief  Constructor
		/// prama glm::vec3 center
		/// prama float radius
		//----------------------------------------------------------------------------------------------------------------------
		SphereCollider(glm::vec3 center, float radius);

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief  Destructor
		//----------------------------------------------------------------------------------------------------------------------
		~SphereCollider();

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief  create the boundary based on the object
		/// prama shared<GEC::ObjObject>
		//----------------------------------------------------------------------------------------------------------------------
		void boundToObject(shared<GEC::ObjObject> obj);

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief  get radius
		/// \return float
		//----------------------------------------------------------------------------------------------------------------------
		inline float getRadius() { return m_radius; }

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief  get center
		/// \return glm::vec3
		//----------------------------------------------------------------------------------------------------------------------
		inline glm::vec3 getCenter() { return m_center; }

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief  set radius
		/// prama float
		//----------------------------------------------------------------------------------------------------------------------
		inline void setRadius(float r) { m_radius = r; }

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief  set center
		/// prama glm::vec3
		//----------------------------------------------------------------------------------------------------------------------
		inline void setCenter(glm::vec3 c) { m_center = c; }

		//----------------------------------------------------------------------------------------------------------------------
		/// \brief  check if a collision has occurred between another GE::SphereCollider
		/// prama GE::SphereCollider
		//----------------------------------------------------------------------------------------------------------------------
		bool collision(SphereCollider& other);

	private:
		glm::vec3 m_center;
		float m_radius;
	};
};
