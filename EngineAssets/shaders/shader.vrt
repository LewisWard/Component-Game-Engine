// Author  : Lewis Ward
// Program : Game Engine
// Date    : 10/10/2016
#version 330

layout(location = 0) in vec4 position; ///< the vertex co-odinate from VBO
layout(location = 1) in vec3 normal; ///< the normal from VBO
layout(location = 2) in vec2 uv; ///< the UV co-odinate from VBO

uniform mat4 modelMatrix;
uniform mat4 viewMatrix;
uniform mat4 projectionlMatrix;
uniform vec3 lightPosition = vec3(0.0, 25.0, 0.0);
uniform vec3 eyePosition = vec3(0.0, 0.0, 0.0);

out vec2 vs_uv;
out vec3 vs_normal;
out vec3 vs_worldPosition;
out mat3 vs_normalMatrix;

void main()
{
  vec4 worldPos = modelMatrix * position;
  vec4 eyePos = viewMatrix * worldPos;
  vec4 clipPos = projectionlMatrix * eyePos;

  gl_Position = clipPos;
  vs_uv = uv;
  vs_normal = normalize(normal);
  vs_worldPosition = worldPos.xyz;
  
  mat4 normalMatrix = transpose(inverse(modelMatrix));
  vs_normalMatrix = mat3(normalMatrix);
}
