// Author  : Lewis Ward
// Program : Game Engine
// Date    : 10/10/2016
#version 330

uniform sampler2D texture;
uniform vec3 lightPosition = vec3(0.0, 25.0, 0.0);
uniform vec3 eyePosition = vec3(0.0, 0.0, 0.0);
uniform vec3 selectedColour = vec3(0.0, 0.0, 0.0);
uniform vec3 collisionColour = vec3(0.0, 0.0, 0.0);

in vec2 vs_uv;
in vec3 vs_normal;
in vec3 vs_worldPosition;
in mat3 vs_normalMatrix;

out vec4 output_colour;

void main()
{
  vec4 diffuse = texture2D(texture, vs_uv);

  // get the direction and distance of the light to the point in world space
  vec3 lightDirection = vec3(lightPosition - vs_worldPosition);
  float lightDistance = length(lightDirection);
  lightDirection = lightDirection / lightDistance; // same as normalize

  // compute the half vector
  vec3 halfVector = normalize(lightDirection + eyePosition);

  vec3 normal = normalize(vs_normalMatrix * vs_normal);

  float diff = max(0.0, dot(normal, lightDirection));
  float specular = max(0.0, dot(normal, halfVector));

  // make sure specular isn't visable somewhere we don't have any diffuse lighting
  if(diff == 0)
    specular = 0;
  else
    specular = pow(specular, 90.0); // hard coding the shininess factor from the light

  // clamp the value
  diffuse = diffuse * diff;
  diffuse = clamp(diffuse, 0, 1);

  output_colour = (diffuse + specular) + vec4(selectedColour + collisionColour, 1.0);
}

